name: Build Poetry distribution
run-name: "Building Poetry distribution as ${{ github.actor }} has pushed changes to main"
on:
  workflow_run:
    workflows: [Creating prerelease]
    types:
      - completed

jobs:
  on-success:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."

      - name: Install Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Add Poetry to path
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH      

      - name: Install dependencies
        run: poetry install

      - name: Add version to environment vars
        run: |
          PROJECT_VERSION=$(poetry version --short)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Check if tag version matches project version
        run: |
          TAG=$(git describe HEAD --tags --abbrev=0)
          echo $TAG
          echo $PROJECT_VERSION
          if [[ "$TAG" != "$PROJECT_VERSION" ]]; then exit 1; fi

      - name: GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release create "${{ env.PROJECT_VERSION }}"
          --generate-notes
          --title "Version "${{ env.PROJECT_VERSION }}"

      - name: Build and publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
